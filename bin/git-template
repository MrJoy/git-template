#!/bin/bash

# TODO: I'm guessing there are use-cases surrounding symlinks that are badly
# TODO: handled right now!  This ought to be addressed more systematically.

# Suss out some paths; mostly we just care about the template directory, and 
# where the root of this git repo is.
REALNAME=`ls -L "$0"`
TMP=`dirname "$REALNAME"`/..
BASE_DIR=`pushd "$TMP" > /dev/null; pwd; popd > /dev/null`
TEMPLATE_DIR=$BASE_DIR/templates
DEFAULT_TEMPLATE_DIR=

if [ "$GIT_PROJECT_TEMPLATE_DIRECTORY" != "" ]; then
  DEFAULT_TEMPLATE_DIR="$TEMPLATE_DIR"
  TEMPLATE_DIR="${GIT_PROJECT_TEMPLATE_DIRECTORY%/}"
fi

# This seems like an ugly way to suss out the root of the git repo, but 
# whatever.
TMP=$(git rev-parse --show-cdup 2> /dev/null).
REPO_STATUS=$?
if [ "$REPO_STATUS" -ne "0" ]; then
  echo "Not a git repo."
  exit 128
fi
REPO_ROOT=`pushd "$TMP" > /dev/null; pwd; popd > /dev/null`


while [ $# -gt 0 ]; do
  case $1 in
    "-?" | "-help" | "--help")
      cat <<END
Usage: git template <template-name>|--freshen|--list|--info

Options:

<template-name>   Will apply a project template to the current git repository.  
                  A project can consist of any number of files belonging in the 
                  working directory and/or the .git directory; although the 
                  latter is HIGHLY discouraged.

--freshen         Update templated files, in the event a template has been 
                  changed and you wish to apply the changes to a repo.

--list            List the available templates.

--info            Show the template this git repo has had applied to it, if any.


Templates:

  Template name is CaSe-SeNsItIvE!

  For files which are versioned under git (.gitignore, .gitattributes), the
  template will ONLY be applied if you have no uncommitted changes on an
  existing version of the file.

  For the hooks directory, the template will always be applied so BE CAREFUL
  ABOUT MODIFYING THIS YOURSELF!  It's highly recommended that you version your
  hooks directory if you ever start mucking with it!

  Templates are searched for first in \$GIT_PROJECT_TEMPLATE_DIRECTORY and if
  not found there, in the default templates directory which for you is:

    $DEFAULT_TEMPLATE_DIR

  See the files in the default template directory for examples of how templates
  are formed.


Status codes:

  0     Operations were performed as requested, with no unexpected/undesirable 
        circumstances encountered.

 64     Operations may have been performed, but at least one file was skipped 
        due to the presence of uncommitted local changes.  Commit/stash/whatever
        and try again.

128     A fatal error was encountered, no operations were performed.
END
exit
    ;;
    "--list")
      export OPERATION=list
      shift 1
    ;;
    "--info")
      export OPERATION=info
      shift 1
    ;;
    "--freshen")
      export OPERATION=update
      export TEMPLATE=`git config --get gittemplate.template`
      shift 1
    ;;
    *)
      export OPERATION=new
      export TEMPLATE=$1
      shift 1
    ;;
  esac
done


case $OPERATION in
  "list")
    A=`ls "$DEFAULT_TEMPLATE_DIR" 2> /dev/null | cut -d. -f1 | sort | uniq`
    B=`ls "$TEMPLATE_DIR" 2> /dev/null | cut -d. -f1 | sort | uniq`
    echo $A $B | perl -pse 's/\s+/\n/g' | sort | uniq
  ;;
  "info")
    git config --get gittemplate.template
  ;;
  "new" | "freshen")
    if [ "$TEMPLATE" == "" ]; then
      echo "Must specify a template name.  Use --help for more information."
      exit 128
    fi

    FILECOUNT=0
    if [ -d "$TEMPLATE_DIR" ]; then
      FILECOUNT=`ls "$TEMPLATE_DIR/$TEMPLATE".* 2> /dev/null | wc -l`
      if [ "$FILECOUNT" -gt "0" ]; then
        USE_TEMPLATE="$TEMPLATE_DIR"
      fi
    fi

    if [ ! "$FILECOUNT" -gt "0" ]; then
      if [ -d "$DEFAULT_TEMPLATE_DIR" ]; then
        FILECOUNT=`ls "$DEFAULT_TEMPLATE_DIR/$TEMPLATE".* 2> /dev/null | wc -l`
        if [ "$FILECOUNT" -gt "0" ]; then
          USE_TEMPLATE="$DEFAULT_TEMPLATE_DIR"
        fi
      fi
    fi

    if [ "$USE_TEMPLATE" == "" ]; then
      echo "Could not find template '$TEMPLATE'.  Use --help for more information."
      exit 128
    fi

    if [ "$OPERATION" == "new" ]; then
      if [ "`git config --get gittemplate.template`" == "" ]; then
        git config --add gittemplate.template "$TEMPLATE"
      else
        echo "Already have a template here.  Use --freshen instead."
        exit 128
      fi
    fi

    # A slightly weird way of handling things, but seems to be safe for names with 
    # spaces.
    STATUS=0
    find "$USE_TEMPLATE" -name "${TEMPLATE}.*" -print | while read TEMPLATE_FILE; do
      #echo "$TEMPLATE_FILE => ${TEMPLATE_FILE/${USE_TEMPLATE}\/${TEMPLATE}./}"
      SHORT_FILE="${TEMPLATE_FILE/${USE_TEMPLATE}\/${TEMPLATE}./}"
      REPO_FILE="$REPO_ROOT"/"$SHORT_FILE"
      IS_NOT_CLEAN=$(git status "$REPO_FILE" -s 2> /dev/null | wc -l)
      if [ "$IS_NOT_CLEAN" -eq "0" ]; then
        # TODO: Stuff.
        TEMPLATE_FILE_IS_DIR=0
        if [ -d "$TEMPLATE_FILE" ]; then
          TEMPLATE_FILE_IS_DIR=1
          # Add a trailing slash so that rsync does what we want.
          TEMPLATE_FILE=${TEMPLATE_FILE}/
        fi
    
        if [ -e "$REPO_FILE" ]; then
          REPO_FILE_IS_DIR=0
          if [ -d "$REPO_FILE" ]; then
            REPO_FILE_IS_DIR=1
          fi
      
          if [ "$REPO_FILE_IS_DIR" != "$TEMPLATE_FILE_IS_DIR" ]; then
            IS_NOT_CLEAN=1
            if [ "$REPO_FILE_IS_DIR" -eq "0" ]; then
              echo "$SHORT_FILE is a file, but template version is a directory.  Skipping."
              STATUS=64
            else
              echo "$SHORT_FILE is a directory, but template version is a file.  Skipping."
              STATUS=64
            fi
          fi
        fi
        if [ "$IS_NOT_CLEAN" -eq "0" ]; then
          # To see why we skip preservation of read/write permissions, times,
          # etc go look at what git does wrt such metadata (short form: nuthin',
          # because that produces saner results in the cases Linus cares most
          # about).
          rsync --recursive --links --executability --devices --specials --whole-file --sparse --ignore-times --out-format="%f applied." "$TEMPLATE_FILE" "$REPO_FILE" | perl -pse "s|^.*?\Q$TEMPLATE.\E||g"
        fi
      else
        echo "$SHORT_FILE has uncommitted changes.  Skipping."
        STATUS=64
      fi
    done
  ;;
esac

exit $STATUS
